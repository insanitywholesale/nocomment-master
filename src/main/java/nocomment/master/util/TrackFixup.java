package nocomment.master.util;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import nocomment.master.db.Database;

public class TrackFixup implements AutoCloseable {

	private static final int[] FUCKED_TRACKS = { 60682, 60609, 65337, 64630, 69267, 67598, 70303, 69849, 68808, 69414,
			70837, 70640, 74760, 71399, 74341, 95821, 75470, 137842, 118808, 118845, 118375, 127409, 147261, 152482,
			151556, 137873, 151662, 137937, 136231, 127364, 151659, 152221, 151665, 151697, 153010, 133659, 222216,
			222220, 222211, 224774, 224778, 208426, 154790, 217447, 232352, 231229, 227446, 219328, 219772, 224529,
			220660, 224194, 218595, 119801, 220657, 220658, 221874, 220654, 219801, 223106, 223117, 225290, 219340,
			221098, 219821, 219378, 219386, 219390, 219381, 219382, 222009, 220329, 220331, 140085, 224922, 220332,
			220333, 220337, 220340, 224633, 228754, 221172, 221168, 220371, 221170, 220779, 220363, 222382, 224970,
			222388, 220380, 222395, 221620, 219465, 222061, 222060, 222064, 140200, 228392, 219968, 231958, 220404,
			220847, 221652, 220399, 231510, 219499, 219509, 222118, 219192, 219532, 219544, 219550, 221292, 134423,
			219502, 222110, 219525, 231128, 220134, 225101, 220082, 222955, 149863, 225096, 220129, 220133, 219729,
			316096, 266664, 311210, 271893, 332056, 236830, 323285, 235657, 325017, 369542, 428073, 661643, 419630,
			672508, 660557, 663161, 660709, 661685, 672516, 668481, 663167, 661809, 663229, 663399, 663311, 660946,
			683943, 702097, 677628, 697023, 672598, 675609, 659854, 663512, 672613, 724872, 708246, 672675, 675643,
			508963, 672674, 675652, 662272, 732665, 755628, 662303, 671047, 776027, 662374, 671070, 732778, 708432,
			708434, 708437, 711205, 681826, 662447, 665203, 672954, 732845, 660469, 732898, 732905, 732897, 673004,
			673006, 732903, 732901, 732908, 782768, 708526, 782736, 782776, 662640, 732991, 732986, 732989, 732990,
			732996, 732995, 732994, 732981, 732983, 733008, 732987, 732982, 733003, 732993, 732999, 733000, 733002,
			733005, 733006, 673171, 673166, 673162, 673163, 756903, 673172, 733078, 733077, 733075, 733082, 662741,
			733088, 756914, 782009, 781999, 840455, 837659, 783226, 941898, 783223, 783234, 783236, 864856, 783240,
			783241, 783243, 943907, 952710, 757217, 757218, 757220, 757221, 870476, 783257, 783277, 783274, 783275,
			783276, 783278, 870489, 870487, 944704, 783282, 783283, 833744, 870525, 940986, 941717, 942643, 870527,
			817251, 946589, 951588, 939088, 943244, 940990, 939080, 939089, 945709, 939096, 940116, 943909, 944709,
			943916, 940998, 945710, 942236, 940118, 859154, 943254, 939105, 850529, 939108, 939901, 850535, 944541,
			845341, 957037, 845344, 955473, 943918, 941003, 942652, 947946, 944711, 950048, 949040, 941004, 939118,
			939119, 958280, 958786, 939116, 940879, 941012, 652445, 941924, 941005, 944548, 943921, 949043, 942661,
			939127, 943270, 943927, 944540, 943928, 949463, 945494, 942662, 939907, 940883, 943272, 950017, 941606,
			943275, 942663, 944718, 940876, 944719, 940155, 959557, 949049, 948590, 812898, 945724, 943276, 941026,
			943938, 939137, 942667, 943939, 941031, 939913, 938791, 942671, 941740, 943281, 940165, 941036, 845394,
			937857, 939148, 959558, 944722, 950013, 943943, 940046, 940887, 941742, 943944, 941931, 949470, 951086,
			941951, 939925, 950057, 945733, 954206, 867039, 941047, 944728, 957042, 950015, 943950, 940888, 939928,
			940176, 953143, 943291, 937869, 845401, 940173, 942683, 945499, 943953, 945739, 939161, 940180, 845404,
			845405, 845406, 939931, 941054, 943298, 937873, 942694, 948607, 942693, 942691, 941749, 939934, 942695,
			951040, 944740, 938794, 942698, 937878, 941059, 939935, 942701, 941056, 952216, 951094, 940190, 943967,
			950497, 941063, 941064, 941065, 945748, 956530, 943306, 940191, 954138, 952161, 952219, 939938, 957543,
			938796, 940193, 940194, 941081, 941071, 946606, 939181, 951096, 951616, 945754, 940273, 956531, 951097,
			945753, 943312, 937889, 943313, 944735, 951614, 952162, 952220, 941080, 939942, 940897, 944744, 948618,
			938799, 944749, 960232, 949081, 958942, 959689, 944753, 946616, 950030, 954219, 956583, 941094, 945765,
			953174, 946615, 952684, 941092, 943329, 941097, 944754, 950515, 951106, 939200, 942648, 939965, 942736,
			941098, 944759, 937906, 939953, 938925, 942846, 945524, 948634, 954222, 952733, 945526, 941106, 939214,
			942745, 945358, 952739, 952237, 938809, 950524, 950523, 960235, 945775, 939220, 958284, 941114, 939221,
			957620, 956984, 938810, 944734, 958136, 949085, 958129, 943980, 949511, 943347, 957622, 937918, 939975,
			954149, 941123, 941074, 958297, 942757, 942758, 944788, 944792, 957065, 951053, 939234, 940208, 958300,
			946605, 944796, 949097, 953151, 941124, 954150, 937934, 940206, 939238, 941614, 950081, 954228, 939986,
			948933, 946612, 949531, 945547, 845456, 953641, 952696, 845455, 949099, 939993, 941131, 939248, 941132,
			939246, 956986, 937946, 955999, 945820, 945819, 956000, 948665, 941140, 941820, 939833, 948188, 944819,
			941824, 939995, 948668, 950940, 940217, 945555, 953650, 958957, 944825, 957632, 958958, 948193, 941151,
			941825, 937961, 959696, 940907, 953653, 950564, 938812, 951061, 945840, 941156, 942769, 937963, 958960,
			940913, 959562, 937964, 954240, 953655, 956009, 958139, 941167, 954244, 944836, 940240, 941169, 945865,
			952217, 941174, 944838, 945570, 937973, 941835, 944587, 941181, 956616, 943363, 939265, 940002, 959699,
			940928, 945573, 953597, 956016, 941183, 956540, 945872, 956991, 956543, 943986, 952047, 937991, 941189,
			941186, 956618, 950096, 945875, 951702, 956022, 941187, 956992, 938941, 956547, 940927, 957081, 941190,
			951705, 941191, 940005, 938551, 939272, 948195, 947814, 943371, 952774, 953193, 945818, 945877, 960253,
			952701, 944287, 944872, 954256, 941178, 951733, 953192, 945582, 951726, 941208, 944874, 953673, 952188,
			950104, 958975, 941210, 955305, 947622, 944875, 944876, 944877, 944878, 943998, 948679, 958315, 959568,
			944884, 943381, 945589, 940271, 948215, 944003, 956035, 954760, 945590, 950108, 942776, 958982, 956039,
			941188, 960239, 944539, 959888, 952904, 940272, 945899, 948217, 945591, 958798, 943296, 942779, 957651,
			943387, 944005, 958985, 937563, 951145, 953428, 944010, 951039, 957655, 944898, 950115, 943392, 950117,
			945595, 958802, 956438, 939286, 940013, 942788, 938031, 953682, 942635, 939289, 957657, 937569, 956996,
			939290, 958999, 950220, 952790, 953213, 942796, 948687, 943861, 953214, 949044, 952792, 945600, 959725,
			939295, 956062, 956067, 945601, 960261, 939300, 938054, 953357, 942799, 937581, 956562, 940019, 941228,
			943402, 942808, 959734, 943398, 954810, 944603, 952588, 959011, 948102, 939309, 938058, 950601, 942811,
			944607, 937585, 960269, 956449, 937587, 938059, 944608, 938061, 939312, 938060, 960271, 958351, 958681,
			960274, 957463, 948241, 951073, 952279, 948626, 939314, 952800, 951091, 942823, 943407, 960277, 959743,
			953685, 941234, 960275, 938856, 958814, 941235, 944032, 954167, 960280, 938862, 938855, 938857, 944918,
			942828, 957118, 950613, 941238, 953693, 939327, 939326, 959745, 845537, 957674, 952292, 939328, 944921,
			944715, 938863, 938864, 940954, 953220, 945614, 957233, 940956, 944621, 938077, 956560, 949579, 946629,
			938078, 945993, 959582, 943423, 941243, 955489, 952802, 943797, 944624, 955973, 960293, 952414, 959708,
			952123, 942849, 943839, 938085, 939338, 941855, 957126, 948194, 954291, 942848, 951742, 956584, 944044,
			938093, 943663, 943428, 944665, 940035, 954814, 959056, 944638, 959060, 953194, 939341, 938088, 951564,
			945998, 942856, 943431, 940960, 959063, 937608, 959062, 940036, 948686, 949096, 957129, 959614, 959067,
			959615, 946006, 939357, 952238, 950624, 948725, 938103, 941973, 950625, 952808, 942862, 957130, 938877,
			952140, 957134, 957131, 960299, 958149, 674967, 942863, 951757, 950143, 845540, 943435, 938883, 945619,
			943917, 937621, 949154, 951756, 944925, 959079, 949152, 957135, 942870, 939366, 940041, 949155, 959083,
			959620, 940042, 940311, 939368, 951894, 959515, 938108, 940313, 958004, 945625, 938884, 940964, 944933,
			940314, 940971, 940966, 953235, 945628, 941271, 945919, 939377, 958160, 958400, 955814, 940972, 946028,
			950633, 944937, 950635, 959625, 955588, 953240, 944942, 946030, 949974, 937548, 959111, 939385, 937639,
			845544, 943282, 949163, 939386, 940045, 950103, 942895, 942894, 937944, 952313, 942903, 938901, 943561,
			942905, 937642, 957706, 959125, 956129, 959760, 944945, 952315, 949168, 958404, 938139, 952318, 937555,
			954318, 940332, 941285, 940975, 942909, 937648, 941290, 944649, 941878, 950651, 845555, 951786, 943455,
			954181, 956676, 954788, 958835, 948289, 940339, 943456, 940815, 938152, 944079, 942914, 942915, 956137,
			944080, 954480, 951789, 938913, 938911, 951051, 949627, 956140, 939394, 937653, 958165, 943582, 944656,
			939395, 944086, 954821, 951044, 952327, 956680, 959138, 938916, 948293, 950667, 940056, 954060, 943583,
			946073, 949174, 956814, 958416, 955574, 952523, 960310, 955621, 943584, 958418, 939401, 950671, 957713,
			940982, 946064, 939406, 940058, 845598, 960313, 945250, 952852, 948693, 940983, 951221, 940350, 955201,
			937663, 941303, 948549, 944660, 939412, 949639, 948304, 954154, 937672, 944959, 950178, 958037, 956690,
			951193, 948202, 941886, 944961, 943589, 944105, 959774, 960324, 940358, 960325, 938166, 954818, 943592,
			938168, 944963, 948087, 938170, 941888, 944971, 940361, 959779, 939422, 944966, 940360, 954349, 940364,
			939902, 952862, 956626, 944975, 958838, 958844, 950690, 948768, 949650, 948311, 944978, 941214, 953286,
			948312, 938176, 949652, 959182, 943761, 958169, 951812, 948137, 938179, 948317, 943486, 944988, 938182,
			956922, 952851, 948656, 942940, 952348, 937638, 942774, 954357, 944117, 946130, 958441, 948322, 944549,
			946128, 945654, 956168, 944995, 957192, 956169, 939435, 951330, 944998, 948775, 953759, 945001, 940381,
			960332, 945655, 960333, 937721, 954365, 943595, 944830, 951241, 939440, 940385, 956176, 945005, 940386,
			937722, 945004, 953766, 944128, 937725, 937724, 939443, 945660, 943506, 958452, 958176, 950086, 948527,
			943397, 953770, 937736, 942568, 957211, 957995, 951143, 937596, 953776, 949036, 845651, 949150, 957586,
			949209, 956182, 939455, 954373, 941340, 959630, 942954, 940391, 945020, 945017, 942957, 950172, 955337,
			953302, 940394, 948341, 937752, 943136, 958463, 949718, 940395, 942963, 952691, 940399, 940398, 939467,
			940397, 942967, 937758, 937757, 953310, 945663, 946157, 959238, 960347, 942971, 940081, 937761, 953307,
			940082, 938956, 960348, 942650, 944146, 944675, 956192, 947976, 944676, 957749, 941359, 845680, 845678,
			960301, 947977, 845670, 949694, 958179, 950216, 943448, 958180, 952825, 957760, 946178, 937771, 952895,
			956466, 940068, 845674, 945038, 955673, 948355, 959325, 945040, 946181, 955024, 845676, 950734, 957668,
			940067, 942829, 956963, 939485, 939492, 845677, 946152, 948031, 943521, 940090, 845681, 947958, 939486,
			940091, 960356, 951268, 946186, 956201, 959806, 939494, 945046, 958487, 952534, 945048, 949701, 943524,
			944683, 944160, 958488, 957595, 939496, 945674, 938229, 938975, 951275, 956008, 940420, 953798, 943528,
			944167, 944690, 956722, 941376, 940422, 956941, 959637, 942989, 944163, 952844, 944916, 940418, 951858,
			955682, 945062, 945066, 952841, 951278, 951218, 943886, 945064, 956211, 940102, 950230, 945069, 942996,
			943532, 944171, 957776, 939511, 938238, 944696, 945681, 960362, 953816, 939516, 957250, 945077, 945078,
			945079, 956212, 945682, 950648, 949234, 950235, 938241, 941385, 942747, 956214, 940433, 940435, 951291,
			944698, 949715, 944699, 952403, 951200, 939522, 951870, 949716, 949717, 940434, 949719, 938245, 953264,
			942753, 946223, 956220, 958774, 945084, 939528, 944182, 859347, 951300, 953710, 939531, 940444, 948381,
			941397, 943012, 940446, 944186, 950765, 954688, 940448, 955700, 939534, 940449, 951306, 958877, 943613,
			948189, 938247, 945691, 960377, 953500, 948821, 939538, 943544, 945530, 945088, 948774, 955174, 944195,
			945089, 946239, 941382, 960381, 939545, 948387, 870389, 945094, 943640, 957789, 945609, 956337, 945097,
			956747, 939549, 949134, 958879, 957472, 956748, 960384, 951192, 944205, 945101, 945102, 945103, 952416,
			943554, 943645, 960386, 944209, 953833, 941416, 940461, 956226, 940463, 952927, 958525, 939563, 940474,
			845722, 943557, 939565, 957802, 952159, 948837, 957274, 947949, 951888, 948399, 951547, 953837, 945920,
			957278, 939572, 938260, 940476, 943022, 943558, 953839, 946654, 954423, 954735, 958161, 943999, 949740,
			957605, 960090, 940485, 960392, 943671, 953358, 958531, 953360, 940487, 940493, 949752, 955292, 940490,
			945561, 944567, 950255, 950795, 946631, 958206, 938268, 941431, 956238, 950797, 952438, 954427, 952439,
			956239, 956353, 959293, 939587, 943684, 953430, 939014, 945112, 943040, 960396, 948422, 945700, 953337,
			945116, 950210, 949280, 943572, 958762, 950806, 959644, 956354, 951370, 938284, 949133, 960342, 953856,
			960104, 939600, 938291, 959304, 949284, 943694, 943695, 944733, 949561, 955447, 954442, 956250, 959646,
			940507, 939495, 945702, 951354, 951908, 946287, 939604, 946285, 946286, 952451, 946666, 957827, 947991,
			957301, 943320, 941446, 958551, 947923, 951380, 940513, 960074, 958028, 960307, 946295, 946251, 943702,
			941450, 938305, 953877, 956777, 940517, 940516, 939024, 939619, 941999, 955669, 944237, 957835, 948281,
			945143, 943661, 956783, 945148, 951927, 944238, 959312, 957841, 952468, 957842, 956364, 941455, 950283,
			951931, 949299, 956365, 952656, 960417, 957319, 952469, 960419, 948451, 958564, 944803, 950831, 948876,
			943065, 952472, 938535, 951932, 939032, 943711, 956789, 954280, 939625, 956380, 958565, 943069, 950291,
			952476, 945158, 952474, 950307, 944254, 943715, 953391, 955751, 944261, 951667, 944259, 944257, 956279,
			952317, 949218, 945161, 951804, 950293, 938335, 943075, 949796, 947786, 950298, 944268, 958026, 959317,
			944267, 948891, 945167, 943720, 956284, 939628, 958134, 948000, 946328, 955755, 941468, 944272, 960433,
			950301, 953907, 939632, 959324, 948895, 956729, 949800, 955764, 947891, 943081, 942002, 945175, 957866,
			943724, 950854, 938343, 941473, 952483, 941475, 958227, 956734, 948271, 939042, 939040, 947755, 945180,
			956803, 938353, 960441, 941480, 948003, 956804, 948004, 948462, 959842, 949762, 959330, 937916, 949320,
			945184, 845839, 951409, 951954, 941482, 944310, 945192, 938360, 943092, 949809, 958591, 948914, 942122,
			941484, 958346, 945199, 949808, 939645, 943091, 948038, 956378, 957678, 947823, 943732, 945197, 960446,
			956306, 953545, 950864, 943096, 945204, 940577, 954450, 945205, 947473, 949132, 945214, 958230, 958537,
			949814, 944312, 950867, 941494, 941497, 939651, 943736, 945215, 953243, 938371, 947828, 945219, 951375,
			952890, 949723, 938376, 939056, 939055, 949334, 939654, 947533, 939657, 953925, 959619, 941883, 956313,
			939057, 938379, 951975, 943741, 939661, 957897, 938380, 939666, 939062, 955791, 955792, 953429, 945226,
			946681, 942146, 957279, 950878, 939671, 945229, 951978, 942147, 942241, 959816, 938386, 938385, 959363,
			951759, 945230, 938388, 945235, 943753, 956319, 938394, 942153, 945237, 945236, 960471, 960475, 960478,
			960480, 947805, 943756, 960468, 960469, 948400, 960481, 939678, 953936, 956321, 945243, 959788, 953937,
			960483, 959367, 960486, 945245, 944329, 939066, 944325, 953265, 957195, 959371, 949838, 941516, 953940,
			948007, 949434, 946085, 952436, 959817, 952515, 939433, 947900, 946685, 959372, 939684, 938412, 955811,
			959375, 956333, 953439, 938413, 939685, 938414, 938417, 942978, 939688, 943112, 957920, 939689, 940613,
			943772, 945260, 958618, 952001, 950272, 938420, 951918, 944352, 948494, 945271, 940624, 947460, 945272,
			947930, 941530, 938425, 957387, 942167, 946748, 945274, 942169, 938426, 942016, 958242, 942006, 952525,
			938429, 938430, 949860, 943556, 948496, 956869, 943124, 946383, 939073, 941430, 938433, 941536, 939075,
			939076, 955832, 951454, 957933, 942174, 942175, 938436, 947702, 948026, 945093, 950916, 939704, 950345,
			955836, 940628, 959401, 946695, 940631, 940630, 944369, 957395, 947953, 944371, 944370, 948029, 948028,
			957397, 946398, 942180, 942190, 949863, 957398, 948104, 949309, 956700, 939713, 957232, 943053, 942181,
			938454, 948030, 946696, 943134, 942003, 944375, 938457, 953454, 943042, 953041, 938455, 948037, 943792,
			950922, 952026, 938465, 952537, 946665, 938467, 950924, 941552, 942462, 948313, 955844, 942183, 942251,
			948123, 943139, 938469, 943141, 950927, 950365, 958635, 953978, 948508, 941560, 950928, 955853, 943218,
			952042, 942019, 952863, 938474, 958144, 943798, 953048, 957414, 950906, 943148, 957956, 943149, 938478,
			941567, 943151, 953463, 950941, 938479, 940648, 939728, 940647, 945289, 951470, 945291, 945290, 943156,
			947848, 948078, 958644, 959674, 952054, 957428, 946422, 944392, 938485, 951473, 944397, 942263, 944398,
			959140, 957966, 953472, 941576, 955864, 942184, 949926, 943643, 946753, 942024, 948886, 946752, 952055,
			959822, 941579, 943608, 941578, 958262, 948092, 952481, 943811, 939737, 954006, 959420, 948823, 948518,
			938498, 940673, 942186, 938502, 950380, 948964, 945305, 948522, 955872, 941589, 943814, 938505, 950844,
			939853, 942191, 942187, 942189, 941590, 944419, 945310, 948525, 950385, 947984, 948530, 946440, 953382,
			940682, 943180, 946441, 953676, 959432, 938515, 957986, 959431, 954018, 943184, 954484, 956433, 938522,
			954020, 938526, 944428, 944432, 938525, 946447, 950610, 952201, 951501, 959331, 949405, 944435, 944436,
			944438, 944437, 955885, 939757, 952580, 942022, 958661, 943189, 941595, 948541, 940702, 943093, 940699,
			942034, 953494, 957994, 949881, 946253, 943194, 941599, 950396, 940706, 950397, 945328, 945329, 950650,
			958272, 956901, 957998, 948548, 953072, 946715, 948974, 944451, 958915, 958887, 955891, 958833, 940882,
			945339, 946719, 958274, 949418, 938549, 938550, 943208, 949886, 958678, 948085, 943835, 938559, 950407,
			955365, 944459, 938558, 941096, 950408, 948555, 942041, 945350, 956374, 946418, 943216, 957467, 949892,
			938562, 948559, 944462, 938565, 952824, 958013, 953081, 944463, 950419, 943217, 949422, 945354, 946726,
			952165, 955909, 939779, 938381, 939780, 958020, 939294, 938573, 939783, 938576, 951537, 950978, 954056,
			945360, 942209, 944476, 951538, 957709, 959463, 950422, 959377, 958695, 958923, 939793, 949429, 950980,
			945367, 950981, 941618, 959464, 948982, 938592, 958030, 950155, 944490, 943224, 944486, 944491, 953363,
			958925, 952529, 955926, 939798, 953478, 957480, 952850, 940754, 957479, 943531, 955387, 949898, 940757,
			938603, 945380, 938606, 943841, 954504, 938604, 944497, 957795, 951552, 956478, 940601, 949919, 956921,
			955935, 942574, 950987, 939806, 946506, 945385, 938615, 941636, 950448, 942051, 945387, 938620, 946509,
			954073, 951861, 940769, 941640, 941639, 951557, 958048, 956483, 954479, 941644, 944511, 940778, 955849,
			940944, 952637, 944512, 940781, 941649, 953535, 941648, 958057, 950456, 941647, 943850, 938634, 948997,
			959494, 947928, 942256, 946421, 938635, 944516, 950124, 948146, 956934, 950461, 959263, 942059, 959497,
			942061, 955954, 938648, 946527, 949000, 938647, 945416, 952649, 953968, 939608, 951568, 958071, 945420,
			958733, 939832, 957506, 938661, 952651, 938672, 955302, 959109, 949948, 954088, 938671, 949012, 952496,
			958358, 954087, 938669, 957377, 941669, 938670, 954497, 946411, 958083, 958742, 943755, 949015, 955250,
			942222, 941676, 942224, 956280, 959859, 943863, 946545, 949022, 955970, 954097, 948132, 940814, 938692,
			955972, 942083, 943866, 954830, 956949, 943869, 940823, 949966, 945443, 952121, 938702, 940827, 958751,
			955977, 949967, 958753, 951006, 940830, 941685, 959523, 938707, 938709, 938711, 956951, 940831, 956384,
			959524, 938714, 938717, 938715, 959912, 959838, 940835, 938473, 959868, 950787, 945452, 940839, 959430,
			941693, 938723, 940842, 959422, 950812, 941923, 955982, 953562, 949983, 956503, 945463, 949984, 959530,
			943888, 959869, 942098, 959872, 945464, 938731, 942099, 945465, 949995, 941597, 944533, 938741, 951026,
			941582, 959541, 938742, 957531, 948164, 946573, 939878, 939872, 950001, 952147, 956516, 944131, 945476,
			942115, 958124, 952149, 940866, 938763, 948097, 952150, 938760, 938764, 952151, 953578, 953577, 954831,
			943904, 939884, 939882, 956521, 938774, 952155, 945481, 946586, 957450, 939885, 959953, 946705, 942264,
			959961, 942314, 942316, 942290, 942330, 942286, 942322, 942188, 946634, 942332, 954841, 942344, 959939,
			942296, 942363, 946790, 946794, 942320, 946793, 942395, 942378, 942388, 941815, 942375, 960043, 942254,
			954595, 959979, 960053, 959978, 960051, 942252, 960072, 942405, 942427, 942419, 942409, 942416, 954606,
			960098, 953305, 946820, 960107, 942458, 946821, 942457, 960001, 942460, 959968, 942469, 942489, 959882,
			942509, 959990, 954617, 946824, 946826, 960114, 953970, 942523, 960005, 954646, 942522, 1132147, 954645,
			960120, 1131130, 1131131, 954627, 942551, 1131133, 1131132, 1131134, 1131135, 946847, 960121, 960123,
			960020, 946848, 946647, 954651, 946633, 959921, 960023, 954662, 960026, 946853, 942576, 942575, 954665,
			942590, 960030, 942594, 940578, 960129, 960034, 942597, 960128, 960064, 942606, 942461, 960145, 960073,
			942616, 960157, 960156, 942618, 942628, 946878, 960161, 959976, 954701, 942496, 954852, 960166, 946887,
			960110, 960183, 946894, 960194, 960213, 960196, 954742, 960217, 946909, 946912, 946449, 960216, 954677,
			954593, 946903, 954743, 954751, 946897, 954856, 945793, 947205, 947168, 946867, 955085, 954765, 947206,
			946948, 946915, 947208, 945902, 954844, 946973, 954783, 954797, 954873, 809061, 954870, 946982, 946974,
			954915, 954778, 946986, 946987, 954880, 947007, 955117, 946892, 954896, 946966, 954908, 954917, 946977,
			954918, 947025, 947027, 954963, 955096, 947015, 947036, 947030, 954803, 954964, 947070, 954965, 954971,
			954854, 955031, 653299, 946583, 954980, 947054, 946934, 947048, 947049, 947014, 947060, 809277, 947067,
			809281, 947066, 947076, 947068, 947069, 947077, 947118, 955010, 954962, 955023, 809316, 954943, 955030,
			809319, 947120, 947119, 947209, 947122, 809355, 955020, 809330, 955041, 947078, 955074, 809356, 955135,
			955050, 947159, 947161, 809369, 809368, 955070, 955122, 955079, 947113, 809365, 955126, 947192, 947165,
			947199, 947200, 955005, 954942, 947221, 947226, 809535, 955111, 947075, 955178, 946908, 809541, 947229,
			955176, 955215, 954411, 947261, 955151, 947295, 947300, 947251, 947277, 947298, 955179, 947267, 955238,
			947204, 955009, 955061, 947283, 947316, 947167, 947330, 955296, 955263, 955281, 955269, 954756, 947341,
			947351, 947409, 947360, 947363, 947362, 955320, 947361, 955336, 955338, 955362, 947395, 947323, 955205,
			947387, 955343, 947434, 947435, 955358, 947433, 947469, 947440, 947231, 947263, 947172, 947412, 955202,
			947455, 947466, 945791, 947471, 947230, 947446, 947352, 947426, 947116, 947452, 947451, 947399, 947423,
			946964, 955211, 955410, 947587, 955385, 955206, 955403, 643295, 955335, 947470, 955429, 955444, 947599,
			947598, 955448, 955425, 955424, 955428, 955430, 955431, 955434, 947600, 955465, 955464, 947615, 947671,
			947654, 947640, 947617, 947670, 947646, 947648, 947675, 947707, 947684, 947773, 947711, 947698, 947729,
			947733, 947745, 947769, 947694, 947548, 947765, 947766, 947774, 947783, 947803, 947802, 947660, 947816,
			947843, 947825, 560576, 947821, 947822, 947826, 947829, 947866, 947836, 947849, 947857, 947882, 947896,
			947869, 947906, 947747, 947907, 657428, 947912, 947922, 656938, 947507, 947873, 658465, 657681, 657682,
			609820, 658401, 657970, 658458, 659059, 658723, 658719, 658705, 658786, 2713370, 566653, 2645714, 2645715,
			3197706, 3197708, 3197707, 3197709, 3197711, 3197715, 3197716, 3197719, 3197720, 3197712, 3197710, 3197717,
			3197718, 3197713, 3197714, 3197721, 3197722, 3409228, 1421639, 3409229, 1426791, 1426790, 1426793, 1426792,
			1426795, 1426796, 1426819, 1426821, 1426798, 1426797, 1426794, 1426799, 1426800, 1426801, 1426802, 1426803,
			1426812, 1426804, 1426805, 1426806, 1426807, 1426808, 1426809, 1426810, 1426811, 1426822, 1426818, 1426813,
			1426814, 1426815, 1426816, 1426817, 1426823, 1426828, 1426829, 1426825, 1426824, 1426826, 1426827, 1426820,
			623448, 620119, 622183, 584706, 624338, 596797, 627145, 629820, 539274, 550496, 550495 };

	private final Connection connection;

	public TrackFixup() throws SQLException {
		this.connection = Database.getConnection();
		connection.setAutoCommit(false);
		connection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
		connection.setReadOnly(false);
	}

	@Override
	public void close() throws Exception {
		connection.close();
	}

	public void fixup() throws SQLException {
		List<Integer> vals = IntStream.of(FUCKED_TRACKS).boxed().collect(Collectors.toList());
		// Collections.shuffle(vals);
		System.out.println("List of tracks size: " + vals.size());
		System.out.println("Dedup'd size: " + new HashSet<>(vals).size());
		List<Integer> dbSays = brokenTracks();
		Set<Integer> set = new HashSet<>(dbSays);
		if (!set.equals(new HashSet<>(vals))) {
			System.out.println(vals);
			System.out.println(dbSays);
			System.out.println(set);
			throw new IllegalStateException();
		}
		for (int i = 0; i < vals.size(); i++) {
			System.out.println();
			System.out.println();
			System.out.println();
			System.out.println();
			System.out.println(i + " of " + vals.size());
			fixup(vals.get(i));
		}
		List<Integer> brokenNow = brokenTracks();
		System.out.println("Broken now: " + brokenNow);
		System.out.println("Num broken now: " + brokenNow.size());
		if (brokenNow.isEmpty()) {
			connection.commit();
			Database.incrementCommitCounter("track_fixup");
		}
		connection.rollback();
	}

	private void fixup(int trackID) throws SQLException {
		System.out.println("Running fixup on track: " + trackID);
		long firstHit = firstHit(trackID);
		long lastHit = lastHit(trackID);
		System.out.println("This track first: " + firstHit + " and last: " + lastHit);
		for (long hit : new HashSet<>(Arrays.asList(firstHit, lastHit))) {
			System.out.println("Track has hit: " + hit);
			Integer otherTrack = trackID(hit);
			System.out.println("Other track: " + otherTrack);
			if (otherTrack == null) {
				System.out.println("RESOLUTION: Update hit and replace null track ID with this one!");
				moveHitIntoTrack(hit, trackID);
				continue;
			}
			if (otherTrack == trackID) {
				System.out.println("Matches, nothing to change!");
				continue;
			}
			System.out.println("Unequal");
			long otherFirst = firstHit(otherTrack);
			long otherLast = lastHit(otherTrack);
			System.out.println("Other track first hit: " + otherFirst + " and last: " + otherLast);
			if (hit != otherFirst && hit != otherLast) {
				System.out.println(
						"RESOLUTION: This hit isn't the first nor last hit of the other track, therefore we can overwrite its track_id back to this one just fine!");
				moveHitIntoTrack(hit, trackID);
				continue;
			}
			List<Long> hitsInThis = allHitsInTrack(trackID);
			List<Long> hitsInOther = allHitsInTrack(otherTrack);
			System.out.println("Hits under current track ID: " + hitsInThis);
			System.out.println("Hits under other track ID:   " + hitsInOther);
			System.out.println("This hit's index in the other track: " + hitsInOther.indexOf(hit));
			System.out.println("This hit is the first hit of the other track: " + (hit == otherFirst));
			System.out.println("This hit is the last hit of the other track: " + (hit == otherLast));
			System.out.println("This hit is the first hit of this track: " + (hit == firstHit));
			System.out.println("This hit is the last hit of this track: " + (hit == lastHit));
			if (hitsInThis.isEmpty()) {
				System.out.println(
						"This track is empty. The first is the same as the last, and that hit doesn't want us, AND we don't actually have any entries of our own in hits");
				System.out.println("RESOLUTION: Delete this track.");
				deleteTrack(trackID);
				continue;
			}
			/*
			 * if (firstHit != hitsInThis.get(0) || lastHit !=
			 * hitsInThis.get(hitsInThis.size() - 1) || otherFirst != hitsInOther.get(0)
			 * || otherLast != hitsInOther.get(hitsInOther.size() - 1)) { throw new
			 * IllegalStateException("This doesn't add up!"); // yeah no shit it doesn't
			 * add up, that's why we're here }
			 */
			if (firstHit != lastHit && otherFirst != otherLast) {
				if (hit == firstHit && hit == otherLast) {
					System.out.println("My first is their last.");
					boolean lastMatches = Objects.equals(trackID(lastHit), trackID);
					boolean firstMatches = Objects.equals(trackID(otherFirst), otherTrack);
					System.out.println("First matches: " + firstMatches);
					System.out.println("Last matches: " + lastMatches);
					if (firstMatches && lastMatches) {
						System.out.println(
								"RESOLUTION: Simple case of overlap by one. My first hit is equal to their last. The solution is to give them this first one, and bump my first to the next ID.");
						// firstHit.track_id is already otherTrack's last
						reassignFirst(trackID, hitsInThis.get(0));
						continue;
					}
				}
				if (hit == lastHit && hit == otherFirst && Objects.equals(trackID(firstHit), trackID)
						&& Objects.equals(trackID(otherLast), otherTrack)) {
					System.out.println(
							"RESOLUTION: Simple case of overlap by one. My last hit is equal to their first. The solution is to give them this last one, and bump my last to the next lowest ID.");
					// lastHit.track_id is already otherTrack's first
					reassignLast(trackID, hitsInThis.get(hitsInThis.size() - 1));
					continue;
				}
				if (hit == firstHit && hit == otherFirst && Objects.equals(trackID(lastHit), trackID)
						&& Objects.equals(trackID(otherLast), otherTrack)) {
					System.out.println(
							"RESOLUTION: We both have the same first hit, but it's pointing to their track, not mine. Give them this first one, and bump my first to the first ID that I truly do have.");
					reassignFirst(trackID, hitsInThis.get(0));
					continue;
				}
			}
			if (otherFirst == otherLast && hitsInOther.size() == 1 && hitsInOther.contains(otherFirst)) {
				System.out.println("The other is just one hit, and we want it.");
				if (firstHit == lastHit) {
					throw new IllegalStateException();
				}
				if (hit == firstHit) {
					System.out.println("RESOLUTION: Reassign my first hit");
					reassignFirst(trackID, hitsInThis.get(0));
					continue;
				}
				else {
					System.out.println("RESOLUTION: Reassign my last hit");
					reassignLast(trackID, hitsInThis.get(hitsInThis.size() - 1));
					continue;
				}
			}
			throw new IllegalStateException();
		}
	}

	private List<Integer> brokenTracks() throws SQLException {
		try (PreparedStatement stmt = connection.prepareStatement(
				"SELECT tracks.id FROM tracks INNER JOIN hits first ON first.id = tracks.first_hit_id INNER JOIN hits last ON last.id = tracks.last_hit_id WHERE (first.track_id IS DISTINCT FROM tracks.id OR last.track_id IS DISTINCT FROM tracks.id OR last.created_at IS DISTINCT FROM tracks.updated_at)");
				ResultSet rs = stmt.executeQuery()) {
			List<Integer> ret = new ArrayList<>();
			while (rs.next()) {
				ret.add(rs.getInt("id"));
			}
			return ret;
		}
	}

	private void moveHitIntoTrack(long hitID, int trackID) throws SQLException {
		System.out.println("UPDATING HIT " + hitID + " TO BE IN TRACK ID " + trackID);
		try (PreparedStatement stmt = connection.prepareStatement("UPDATE hits SET track_id = ? WHERE id = ?")) {
			stmt.setInt(1, trackID);
			stmt.setLong(2, hitID);
			stmt.executeUpdate();
		}
	}

	private void deleteTrack(int trackID) throws SQLException {
		System.out.println("DELETING TRACK ID " + trackID);
		try (PreparedStatement stmt = connection.prepareStatement("DELETE FROM tracks WHERE id = ?")) {
			stmt.setInt(1, trackID);
			stmt.executeUpdate();
		}
	}

	private void reassignFirst(int trackID, long hitID) throws SQLException {
		System.out.println("MODIFYING TRACK " + trackID + " TO HAVE first_hit_id " + hitID);
		if (trackID(hitID) != trackID) {
			throw new IllegalStateException();
		}
		try (PreparedStatement stmt = connection.prepareStatement("UPDATE tracks SET first_hit_id = ? WHERE id = ?")) {
			stmt.setLong(1, hitID);
			stmt.setInt(2, trackID);
			stmt.executeUpdate();
		}
	}

	private void reassignLast(int trackID, long hitID) throws SQLException {
		long createdAt = getCreatedAt(hitID);
		System.out.println(
				"MODIFYING TRACK " + trackID + " TO HAVE last_hit_id " + hitID + " AND updated_at " + createdAt);
		if (trackID(hitID) != trackID) {
			throw new IllegalStateException();
		}
		try (PreparedStatement stmt = connection
				.prepareStatement("UPDATE tracks SET last_hit_id = ?, updated_at = ? WHERE id = ?")) {
			stmt.setLong(1, hitID);
			stmt.setLong(2, createdAt);
			stmt.setInt(3, trackID);
			stmt.executeUpdate();
		}
	}

	private long getCreatedAt(long hitID) throws SQLException {
		try (PreparedStatement stmt = connection.prepareStatement("SELECT created_at FROM hits WHERE id = ?")) {
			stmt.setLong(1, hitID);
			try (ResultSet rs = stmt.executeQuery()) {
				rs.next();
				return rs.getLong("created_at");
			}
		}
	}

	private long firstHit(int trackID) throws SQLException {
		try (PreparedStatement stmt = connection.prepareStatement("SELECT first_hit_id FROM tracks WHERE id = ?")) {
			stmt.setInt(1, trackID);
			try (ResultSet rs = stmt.executeQuery()) {
				rs.next();
				return rs.getLong("first_hit_id");
			}
		}
	}

	private long lastHit(int trackID) throws SQLException {
		try (PreparedStatement stmt = connection.prepareStatement("SELECT last_hit_id FROM tracks WHERE id = ?")) {
			stmt.setInt(1, trackID);
			try (ResultSet rs = stmt.executeQuery()) {
				rs.next();
				return rs.getLong("last_hit_id");
			}
		}
	}

	private Integer trackID(long hitID) throws SQLException {
		try (PreparedStatement stmt = connection.prepareStatement("SELECT track_id FROM hits WHERE id = ?")) {
			stmt.setLong(1, hitID);
			try (ResultSet rs = stmt.executeQuery()) {
				rs.next();
				int ret = rs.getInt("track_id");
				if (rs.wasNull()) {
					return null;
				}
				return ret;
			}
		}
	}

	private List<Long> allHitsInTrack(int trackID) throws SQLException {
		try (PreparedStatement stmt = connection
				.prepareStatement("SELECT id FROM hits WHERE track_id = ? ORDER BY created_at")) {
			stmt.setInt(1, trackID);
			try (ResultSet rs = stmt.executeQuery()) {
				List<Long> ret = new ArrayList<>();
				while (rs.next()) {
					ret.add(rs.getLong("id"));
				}
				return ret;
			}
		}
	}

}
